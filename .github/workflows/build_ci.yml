# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' 'discord-haskell.cabal'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.15.20220620
#
# REGENDATA ("0.15.20220620",["github","discord-haskell.cabal"])
#
name: CI
on:
  - push
  - pull_request

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build - ${{ matrix.os }} - ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    timeout-minutes:
      60
    continue-on-error: false
    strategy:
      matrix:
        os: ["ubuntu-20.04"]
        ghc: ["8.10.4", "8.10.7", "9.0.2"]
        include:
          - os: ubuntu-18.04
            ghc: latest
          - os: macOS-latest
            ghc: "8.10.7"
          - os: windows-latest
            ghc: "8.10.7"
      fail-fast: false
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: haskell/actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: true

      - name: Update cabal package database
        run: cabal update

      - name: Set PATH and environment variables
        run: |
          echo "GHC=$GHC_EXE" >> $GITHUB_ENV
          echo "CABAL=$CABAL_EXE" >> $GITHUB_ENV
          echo "STACK=$STACK_EXE" >> $GITHUB_ENV
        env:
          GHC_EXE: ${{ steps.setup-haskell.outputs.ghc-exe }}
          CABAL_EXE: ${{ steps.setup-haskell.outputs.cabal-exe }}
          STACK_EXE: ${{ steps.setup-haskell.outputs.stack-exe }}

      - name: env
        run: |
          env

      - name: versions
        run: |
          ${GHC} --version || true
          ${CABAL} --version || true
          ${STACK} --version || true

      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: |
            ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
            dist-newstyle
          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}

      - name: Install libsodium (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pacman -S --noconfirm mingw-w64-x86_64-libsodium mingw-w64-x86_64-opus
        # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#shells
        shell: C:\shells\msys2bash.cmd {0}

      - name: Install libsodium (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install -y libsodium-dev libopus-dev

      - name: Install libsodium (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew install libsodium opus

      - name: install dependencies
        run: |
          cabal sdist -z -o .
          cabal get discord-haskell-voice-*.tar.gz
          cd discord-haskell-voice-*/
          ${CABAL} build --ghc --with-compiler=${GHC} --disable-tests --disable-benchmarks --dependencies-only -j2 all
          ${CABAL} build --ghc --with-compiler=${GHC} --enable-tests --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          cd discord-haskell-voice-*/
          ${CABAL} build --ghc --with-compiler=${GHC} --disable-tests --disable-benchmarks all
      - name: build
        run: |
          cd discord-haskell-voice-*/
          ${CABAL} build --ghc --with-compiler=${GHC} --enable-tests all --write-ghc-environment-files=always
      - name: cabal check
        run: |
          cd discord-haskell-voice-*/
          ${CABAL} -vnormal check
