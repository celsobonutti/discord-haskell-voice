runVoice executes the things inside and exits voice when done

runVoice $ do
    join 12341534123
    join 51241251223 -- join multiple channels and play same thing across all
    play' (V.File "joe.mp3")

runVoice $ do -- play sth with lower volume
    join 12412552454
    play (V.YoutubeQuery "don't stop me now") $ mapC (* 0.5)

query <- newMVar -- join now, play later from a mutable var (filled with e.g. --play)
runVoice $ do
    join 231525124124
    forever $ do
        q <- readMVar query
        play q $ mapC (* 0.5)


Make the thing below impossible to do
   handle <- runVoice $ join 123412512423
   runVoice $ play (V.YoutubeQuery "test") $ mapC id
(because: what if handle died between first and second function? what if developer doesn't exit voice? what if....)

newtype DVoice a = DVoice { unVoice :: StateT DVHandle DiscordHandler a }

runVoice :: DVoice () -> DiscordHandler ()
runVoice :: runStateT initialstate . unVoice

play :: IO.Handle -> ConduitT ByteString ByteString DiscordHandler () -> DVoice ()
play thing component = 
    voiceHandle <- ask    
    runConduit
       $ sourceHandle thing
      .| component
      .| mapMC opusEncode
      .| sinkTBMChan (sendables handle)


ConduitT _ _ DiscordHandler ()